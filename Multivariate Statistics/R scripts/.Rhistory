install.packages(matlib)
install.packages("matlib")
install.packages("matlib")
x1 <- c(30, 90, -10, 10, 30, 60, 0, 40)
x2 <- c(-8, 7, -2, 0, -2, 0, -2, 1)
x3 <- c(-1, 6, 4, 2, 5, 3, 4, 2)
p <- 3
# When we are in teorical point view should be written, when we have samples we can obtain using cov, like here
dat <- data.frame(x1, x2, x3)
print("The Mean is given by")
mean.dat <- colMeans(dat)
print("The cov is given by")
cov.dat <- cov(dat)
print("The inverse of the cov is given by")
invcov.dat <- inv(t(t(cov.dat)))
invcov.dat <- inv(t(t(cov.dat)))
install.packages("matlib")
x1 <- c(30, 90, -10, 10, 30, 60, 0, 40)
x2 <- c(-8, 7, -2, 0, -2, 0, -2, 1)
x3 <- c(-1, 6, 4, 2, 5, 3, 4, 2)
p <- 3
# When we are in teorical point view should be written, when we have samples we can obtain using cov, like here
dat <- data.frame(x1, x2, x3)
print("The Mean is given by")
mean.dat <- colMeans(dat)
print("The cov is given by")
cov.dat <- cov(dat)
print("The inverse of the cov is given by")
invcov.dat <- inv(t(t(cov.dat)))
FoodPriceUSA <- read.delim2("~/Documents/Course/Multivariate Statistics/BD/FoodPriceUSA.txt")
View(FoodPriceUSA)
FoodPriceUSA <- read.delim2("~/Documents/Course/Multivariate Statistics/R scripts/BD/FoodPriceUSA.txt")
View(FoodPriceUSA)
library(readxl)
SimpleData <- read_excel("Documents/Course/Multivariate Statistics/R scripts/BD/SimpleData.xls")
View(SimpleData)
path_data <- "~/Documents/Course/Multivariate Statistics/R scripts/BD/SimpleData.xls"
simple <- read_excel(path_data)
sc <- var(simple)
print(eigen(sc))
#Cluster Analysis
str(mtcars)
setwd("~/Documents/Course/Multivariate Statistics/R scripts")
View(mtcars)
#Clustering of objects
Mdistancia<-dist(mtcars, method="euclidian")
hc = hclust(Mdistancia, method="complete")
plot(hc,hang=-1, main="Euclidean distance/furthest neighbor",
labels=mtcars$am,cex=0.7)
rect.hclust(hc, k=3,border = "blue")
hc = hclust(Mdistancia, method="single")
plot(hc,hang=-1, main="Euclidean distance/furthest neighbor",
labels=mtcars$am,cex=0.7)
rect.hclust(hc, k=3,border = "blue")
view(Mdistancia)
View(Mdistancia)
Mdistancia
hc = hclust(Mdistancia, method="complete") #single would also be an option
plot(hc,hang=-1, main="Euclidean distance/furthest neighbor",
labels=mtcars$am,cex=0.7)
rect.hclust(hc, k=3,border = "blue")
plot(hc,hang=-1, main="Euclidean distance/furthest neighbor", labels=mtcars$am,cex=0.7)
rect.hclust(hc, k=3,border = "blue")
plot(hc,hang=-1, main="Euclidean distance/furthest neighbor", cex=0.7) #labels=mtcars$am,
rect.hclust(hc, k=3,border = "blue")
plot(hc,hang=-1, main="Euclidean distance/furthest neighbor", cex=0.7, labels=mtcars$am)
rect.hclust(hc, k=3,border = "blue")
plot(hc,hang=-1, main="Euclidean distance/furthest neighbor", cex=0.7) #, labels=mtcars$am)
rect.hclust(hc, k=3,border = "blue")
#k=3 clusters
groups=cutree(hc,k=3)
pca=prcomp(mtcars, scale=T)
str(pca)
pca$x
plot(pca$x[,1:2], type="n")
text(pca$x[,1:2], rownames(mtcars), col=groups)
View(pca)
table(groups)
str(hc)
hc$order
hc$merge
mtcars
plot(hc,hang=-1, main="Euclidean distance/furthest neighbor", cex=0.7, labels=hc$order)
rect.hclust(hc, k=3,border = "blue")
#Clustering of Variables
a=cor(mtcars); a
b=sqrt(1-a^2) ; b
c=as.dist(b,diag = FALSE,upper = FALSE); c
res=hclust(c,method ="average")
plot(res)
View(b)
View(c)
View(c$value)
View(c$Value)
rect.hclust(hc, k=3,border = "blue")
res=hclust(c,method ="average")
plot(res)
rect.hclust(hc, k=3,border = "blue")
#Comparing with vs
library(fpc)
res=cluster.stats(Mdistancia,clustering=groups, alt.clustering=mtcars$vs +1)
res
library(cluster)
plot(silhouette(groups, Mdistancia),col= c("blue", "purple","brown"))
groups=cutree(hc,k=2)
res=cluster.stats(Mdistancia,clustering=groups, alt.clustering=mtcars$vs +1)
res
library(cluster)
plot(silhouette(groups, Mdistancia),col= c("blue", "purple","brown"))
plot(silhouette(groups, Mdistancia),col= c("blue", "purple")) #,"brown"))
plot(silhouette(groups, Mdistancia),col= c("blue", "purple","brown"))
groups=cutree(hc,k=3)
plot(silhouette(groups, Mdistancia),col= c("blue", "purple","brown"))
### Biclustering
#Bimax (binary data)
# See http://www.kemaleren.com/post/bimax/
install.packages("biclust")
### Biclustering
#Bimax (binary data)
# See http://www.kemaleren.com/post/bimax/
install.packages("biclust")
library(biclust)
#To find 0-BICLUSTERS:
str(mtcars)
mpgBin=ifelse(mtcars$mpg<mean(mtcars$mpg),0,1)
cylBin=ifelse(mtcars$cyl<mean(mtcars$cyl),0,1)
Newdata=data.frame(mpgBin,cylBin,mtcars$vs,mtcars$am)
str(Newdata)
for (i in 1:dim(Newdata)[2]) { Newdata[,i]<-1-Newdata[,i]}
NewdataM=as.matrix(Newdata)
bics <- biclust(x=NewdataM, method=BCBimax(), minr=5, minc=3, number=3)
(GroupsBic=bicluster(NewdataM, bics))
#Explore:
biclusternumber(bics)
biclusternumber(bics)$Bicluster1
View(bics)
(GroupsBic=bicluster(NewdataM, bics))
View(GroupsBic)
View(GroupsBic)
bics <- biclust(x=Newdata, method=BCBimax(), minr=5, minc=3, number=3)
(GroupsBic=bicluster(NewdataM, bics))
#Explore:
biclusternumber(bics)
biclusternumber(bics)$Bicluster1
(GroupsBic=bicluster(Newdata, bics))
#Explore:
biclusternumber(bics)
biclusternumber(bics)$Bicluster1
bics <- biclust(x=Newdata, method=BCBimax(), minr=5, minc=3, number=3)
(GroupsBic=bicluster(Newdata, bics))
#Explore:
biclusternumber(bics)
biclusternumber(bics)$Bicluster1
